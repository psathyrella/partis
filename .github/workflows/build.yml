name: Build and Test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
    - uses: actions/checkout@v3
    - name: Checkout tags
      run: git fetch --unshallow origin +refs/tags/*:refs/tags/*
    - name: Set git branch variable
      run: echo ::set-env name=BRANCH::$(git branch --show-current)
    - name: Set git tag variable
      run: if [ $BRANCH == "main" ];then echo ::set-env name=TAG::$(git describe --tags);else echo ::set-env name=TAG::$BRANCH;fi
    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: Build the Docker image
      run: docker build . -t quay.io/matsengrp/partis:$TAG
    # - name: Run tests in the Docker image  # eh, would need to install simulation stuff to do this, and not worth it at the moment (the quick test is run at the end of the docker build above)
    #   run: docker run quay.io/matsengrp/partis:$TAG /bin/bash -c "/partis/test/test.py --run-all"

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13] #[ubuntu-latest, macos-13]
        python-version: ['3.12']
        install-method: ['pip', 'pipx']
      fail-fast: false

    env:
      TERM: xterm

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Checkout ham submodule
      if: matrix.install-method == 'pip'
      run: |
        git submodule update --init packages/ham

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python-is-python3 pipx build-essential cmake libgsl-dev libyaml-cpp-dev scons mafft ncurses-base ncurses-bin

    - name: Install system dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install python3 pipx cmake gsl yaml-cpp scons mafft
        brew install --cask font-lato

    - name: Install with pip
      if: matrix.install-method == 'pip'
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e . -v

    - name: Install with pipx
      if: matrix.install-method == 'pipx'
      run: |
        pipx install partis-bcr

    - name: Test partis help
      run: |
        partis --help

    # - name: Test scripts work
    #   run: |
    #     split-loci.py --help

    # - name: Run quick test
    #   run: |
    #     partis-test.py --quick

    # - name: Run full test
    #   run: |
    #     # temporarily, have to run 'partis partition' outside of test.py to see the ham error in the github build logs (the same command is then run by partis-test.py)
    #     partis partition --dont-write-git-info --paired-loci --paired-indir test/paired/ref-results/test/simu --parameter-dir test/paired/new-results/test/parameters/simu --plot-annotation-performance --max-ccf-fail-frac 0.10 --is-simu --plotdir test/paired/new-results/partition-new-simu-annotation-performance --only-csv-plots --no-partition-plots --random-seed 1 --n-procs 10 --paired-outdir test/paired/new-results/partition-new-simu
    #     partis get-selection-metrics --dont-write-git-info --existing-output-run-cfg paired --min-selection-metric-cluster-size 3 --min-paired-cluster-size-to-read 3 --random-seed 1 --n-procs 10 --outfname test/ref-results/partition-new-simu.yaml --selection-metric-fname test/new-results/get-selection-metrics-new-simu.yaml --tree-inference-method fasttree
    #     partis get-selection-metrics --dont-write-git-info --existing-output-run-cfg paired --min-selection-metric-cluster-size 3 --min-paired-cluster-size-to-read 3 --random-seed 1 --n-procs 10 --outfname test/ref-results/partition-new-simu.yaml --selection-metric-fname test/new-results/get-selection-metrics-new-simu.yaml --tree-inference-method iqtree
    #     partis get-selection-metrics --dont-write-git-info --existing-output-run-cfg paired --min-selection-metric-cluster-size 3 --min-paired-cluster-size-to-read 3 --random-seed 1 --n-procs 10 --outfname test/ref-results/partition-new-simu.yaml --selection-metric-fname test/new-results/get-selection-metrics-new-simu.yaml --tree-inference-method raxml
    #     partis-test.py --paired --no-simu
    #     # partis cache-parameters --dont-write-git-info --paired-loci --paired-indir test/paired/ref-results/test/simu --parameter-dir test/paired/new-results/test/parameters/simu --is-simu --random-seed 1 --n-procs 10

    - name: Build and publish to PyPI
      if: matrix.install-method == 'pip' && github.event_name == 'push'  #  && github.ref == 'refs/heads/main'  #  && matrix.os == 'ubuntu-latest'
      run: |
        python -m pip install build twine
        python -m build 2>&1 | grep -v 'adding .test/\|adding .data/'
        python -m twine check dist/*
        python -m twine upload dist/*  #  --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
